;; The first three lines of this file were inserted by DrRacket. They record metadata
;; about the language level of this file in a form that our tools can easily process.
#reader(lib "htdp-intermediate-lambda-reader.ss" "lang")((modname testing) (read-case-sensitive #t) (teachpacks ()) (htdp-settings #(#t constructor repeating-decimal #f #t none #f () #t)))
(require "kenken-draw.rkt")


(define-struct puzzle (size board constraints))
;; A Puzzle is a (make-puzzle 
;;                Nat 
;;                (listof (listof (anyof Sym Nat Guess)))
;;                (listof (list Sym Nat (anyof '+ '- '* '/ '=))))
;; requires: See Assignment Specifications

(define-struct guess (symbol number))
;; A Guess is a (make-guess Sym Nat)
;; requires: See Assignment Specifications

;; Some useful constants
;; from assignment specification
(define puzzle1
  (make-puzzle 
   4
   (list
    (list 'a 'b 'b 'c)
    (list 'a 'd 'e 'e)
    (list 'f 'd 'g 'g)
    (list 'f 'h 'i 'i))
   (list
    (list 'a 6 '*)
    (list 'b 3 '-)
    (list 'c 3 '=)
    (list 'd 5 '+)
    (list 'e 3 '-)
    (list 'f 3 '-)
    (list 'g 2 '/)
    (list 'h 4 '=)
    (list 'i 1 '-))))

;; a partial solution to puzzle1
(define puzzle1partial
  (make-puzzle 
   4
   (list
    (list 'a 'b 'b 'c)
    (list 'a 2 1 4)
    (list 'f 3 'g 'g)
    (list 'f 'h 'i 'i))
   (list
    (list 'a 6 '*)
    (list 'b 3 '-)
    (list 'c 3 '=)
    (list 'f 3 '-)
    (list 'g 2 '/)
    (list 'h 4 '=)
    (list 'i 1 '-))))

;; a partial solution to puzzle1 with a cage partially filled in
(define puzzle1partial2
  (make-puzzle 
   4
   (list
    (list (make-guess 'a 2) 'b 'b 'c)
    (list 'a 2 1 4)
    (list 'f 3 'g 'g)
    (list 'f 'h 'i 'i))
   (list
    (list 'a 6 '*)
    (list 'b 3 '-)
    (list 'c 3 '=)
    (list 'f 3 '-)
    (list 'g 2 '/)
    (list 'h 4 '=)
    (list 'i 1 '-))))

;; a partial solution to puzzle1 with a cage partially filled in
;; but not yet verified 
(define puzzle1partial3
  (make-puzzle 
   4
   (list
    (list (make-guess 'a 2) 'b 'b 'c)
    (list (make-guess 'a 3) 2 1 4)
    (list 'f 3 'g 'g)
    (list 'f 'h 'i 'i))
   (list
    (list 'a 6 '*)
    (list 'b 3 '-)
    (list 'c 3 '=)
    (list 'f 3 '-)
    (list 'g 2 '/)
    (list 'h 4 '=)
    (list 'i 1 '-))))

;; The solution to puzzle 1
(define puzzle1soln
  (make-puzzle
   4
   '((2 1 4 3)
     (3 2 1 4)
     (4 3 2 1)
     (1 4 3 2))
   empty))

;; wikipedia KenKen example
(define puzzle2
  (make-puzzle
   6
   '((a b b c d d)
     (a e e c f d)
     (h h i i f d)
     (h h j k l l)
     (m m j k k g)
     (o o o p p g))
   '((a 11 +)
     (b 2 /)
     (c 20 *)
     (d 6 *)
     (e 3 -)
     (f 3 /)
     (g 9 +)
     (h 240 *)
     (i 6 *)
     (j 6 *)
     (k 7 +)
     (l 30 *)
     (m 6 *)
     (o 8 +)
     (p 2 /))))

;; The solution to puzzle 2
(define puzzle2soln
  (make-puzzle
   6
   '((5 6 3 4 1 2)
     (6 1 4 5 2 3)
     (4 5 2 3 6 1)
     (3 4 1 2 5 6)
     (2 3 6 1 4 5)
     (1 2 5 6 3 4))
   empty))

;; Tiny board
(define puzzle3
  (make-puzzle 
   2 
   '((a b) 
     (c b)) 
   '((b 3 +) 
     (c 2 =)
     (a 1 =))))

(define puzzle3partial
  (make-puzzle
   2 
   (list
    (list 'a (make-guess 'b 1))
    (list 'c (make-guess 'b 2)))
   '((b 3 +) 
     (c 2 =)
     (a 1 =))))  

;; a big board:  will take a *long* time without trying the bonus
(define puzzle4
  (make-puzzle
   9
   '((a a b c d e e f f)
     (g h b c d i j k l)
     (g h m m i i j k l)
     (n o m p p q q r s)
     (n o t u p v v r s)
     (n w t u x x y z z)
     (A w B C C C y D D)
     (A B B E E F G H I)
     (J J K K F F G H I))
   '((a 2 /)
     (b 11 +)
     (c 1 -)
     (d 7 *)
     (e 4 -)
     (f 9 +)
     (g 1 -)
     (h 4 /)
     (i 108 *)
     (j 13 +)
     (k 2 -)
     (l 5 -)
     (m 84 *)
     (n 24 *)
     (o 40 *)
     (p 18 *)
     (q 2 /)
     (r 2 -)
     (s 13 +)
     (t 10 +)
     (u 13 +)
     (v 2 -)
     (w 63 *)
     (x 1 -)
     (y 3 /)
     (z 2 /)
     (A 7 +)
     (B 13 +)
     (C 336 *)
     (D 1 -)
     (E 15 +)
     (F 12 *)
     (G 9 +)
     (H 5 -)
     (I 18 *)
     (J 3 /)
     (K 40 *))))


;;==============================================================================
;; Part (b)
;; (used-in-row puz pos) produces a list of numbers used in the same 
;; row as (x,y) position, pos, in the given puz.  
;; used-in-row: Puzzle Posn -> (listof Nat)
;; Examples:
(check-expect (used-in-row puzzle1 (make-posn 1 1)) empty)
(check-expect (used-in-row (make-puzzle 1 '((a)) '((a 1 =)))(make-posn 0 0)) empty)  ;; Test 001
(check-expect (used-in-row (make-puzzle 3 '((b b c) (b a a) (a a d))  ;; Test 002
                                        '((a 8 +) (b 4 *) (c 3 =) (d 2 =)))
                           (make-posn 1 1))
              empty)
(check-expect (used-in-row (make-puzzle 3 (list (list (make-guess 'a 1) (make-guess 'a 2) 'a)  ;; Test 003
                                                (list 2 3 1)
                                                (list 3 1 2))
                                        '((a 6 +)))
                           (make-posn 2 0))
              '(1 2))
(check-expect (used-in-row (make-puzzle 3 (list (list 'a 'a 3)  ;; Test 004
                                                (list 2 3 (make-guess 'b 1))
                                                (list (make-guess 'b 3) (make-guess 'b 1) 'b))
                                        '((b 6 *) (a 2 /)))
                           (make-posn 2 2))
              '(1 3))

(define (used-in-row puz pos)
  (quicksort (filter number?
                     (map (lambda (x)
                            (cond
                              [(guess? x)(guess-number x)]
                              [else x]))
                          (list-ref (puzzle-board puz) (posn-y pos)))) <))

;; Tests:
(check-expect (used-in-row puzzle1partial (make-posn 2 2)) (list 3))
(check-expect (used-in-row puzzle1partial2 (make-posn 0 1)) (list 1 2 4))
(check-expect (used-in-row (make-puzzle 3 '((1 2 d) (b 3 b) (b b b))  ;; Test 005
                                        '((d 3 =) (b 12 *)))
                           (make-posn 2 0))
              '(1 2))
(check-expect (used-in-row (make-puzzle 3 '((1 2 d) (b 3 b) (b b b))  ;; Test 006
                                        '((b 12 *) (d 3 =)))
                           (make-posn 0 1))
              '(3))
(check-expect (used-in-row (make-puzzle 4 (list (list (make-guess 'a 4) (make-guess 'a 2) 'c 'c)  ;; Test 007
                                                (list 2 (make-guess 'a 3) 'd (make-guess 'a 4))
                                                (list 3 (make-guess 'a 1) 'a 'a)
                                                (list 1 4 'b 'b))
                                        '((a 20 +) (c 3 /) (d 1 =) (b 1 -)))
                           (make-posn 2 2))
              '(1 3))
(check-expect (used-in-row (make-puzzle 4 (list (list 4 'b 'b 1)  ;; Test 008
                                                (list (make-guess 'a 2) 'a 1 4)
                                                (list 'a 'a 'a 'a)
                                                (list 1 4 2 3))
                                        '((a 144 *) (b 5 +)))
                           (make-posn 1 1))
              '(1 2 4))

;; (used-in-column puz pos) produces a list of numbers used in the same
;; column as (x,y) position, pos, in the given puz.  
;; used-in-column: Puzzle Posn -> (listof Nat)
;; Examples:
(check-expect (used-in-column puzzle1 (make-posn 1 1)) empty)
(check-expect (used-in-column puzzle1partial (make-posn 2 2)) (list 1))
(check-expect (used-in-column puzzle1partial2 (make-posn 0 1)) (list 2))
(check-expect (used-in-column (make-puzzle 1 '((a)) '((a 1 =))) (make-posn 0 0)) empty)  ;; Test 001
(check-expect (used-in-column (make-puzzle 3 '((b b c) (b a a) (a a d))  ;; Test 002
                                           '((a 8 +) (b 4 *) (c 3 =) (d 2 =)))
                              (make-posn 1 1))
              empty)
(check-expect (used-in-column (make-puzzle 3 (list (list (make-guess 'a 1) (make-guess 'a 2) (make-guess 'a 3))  ;; Test 003
                                                   (list (make-guess 'a 2) (make-guess 'a 3) (make-guess 'a 1))
                                                   (list 3 'a 2))
                                           '((a 36 *)))
                              (make-posn 1 2))
              '(2 3))
(check-expect (used-in-column (make-puzzle 3 (list (list 1 2 (make-guess 'a 3))  ;; Test 004
                                                   (list (make-guess 'a 2) (make-guess 'a 3) 'a)
                                                   (list 3 1 'b))
                                           '((a 9 +) (b 2 =)))
                              (make-posn 2 1))
              '(3))

(define (used-in-column puz pos)
  (quicksort (filter number?
                      (map (lambda (x)
                             (cond
                               [(guess? x)(guess-number x)]
                               [else x]))
                           (map (lambda (x)
                                  (list-ref x (posn-x pos)))
                                (puzzle-board puz)))) <))
;; Tests:
(check-expect (used-in-column (make-puzzle 3 (list (list (make-guess 'a 1) (make-guess 'a 2) 'a)  ;; Test 005
                                                   (list 2 3 1)
                                                   (list 3 1 2))
                                           '((a 6 +)))
                              (make-posn 2 0))
              '(1 2))
(check-expect (used-in-column (make-puzzle 3 '((1 d d) (a 3 b) (a 1 b))  ;; Test 006
                                           '((d 5 +) (a 5 +) (b 2 /)))
                              (make-posn 1 0))
              '(1 3))
(check-expect (used-in-column (make-puzzle 4 (list (list (make-guess 'a 4) (make-guess 'a 2) 'c 'c)  ;; Test 007
                                                   (list (make-guess 'a 2) 3 1 'c)
                                                   (list (make-guess 'a 3) 'a 4 'd)
                                                   (list 'b 4 2 'd))
                                           '((a 48 *) (b 1 =) (d 5 +) (c 12 *)))
                              (make-posn 1 2))
              '(2 3 4))
(check-expect (used-in-column (make-puzzle 4 (list (list 4 'a 3 1)  ;; Test 008
                                                   (list 2 3 (make-guess 'b 1) (make-guess 'b 4))
                                                   (list 3 1 (make-guess 'b 4) 'b)
                                                   (list 1 4 2 3))
                                           '((b 11 +) (a 2 =)))
                              (make-posn 3 2))
              '(1 3 4))


;;==============================================================================
;; Part (c)

;;This function may be useful as a helper for available-vals

;; (allvals n) produces a list of values from 1 to n
;; allvals: Nat -> (listof Nat)
;; Examples:
(check-expect (allvals 0) empty)
(check-expect (allvals 1) (list 1))

(define (allvals n) (build-list n (lambda (x) (add1 x))))

;; Tests:
(check-expect (allvals 3) (list 1 2 3))

;; (available-vals puz pos) produces a list of valid entries for the (x,y)  
;; position, pos, of the consumed puzzle, puz.  
;; available-vals: Puzzle Posn -> (listof Nat)
;; Examples:
(check-expect (available-vals puzzle1 (make-posn 2 3)) '(1 2 3 4))
(check-expect (available-vals (make-puzzle 1 '((a)) '((a 1 =))) (make-posn 0 0)) '(1))  ;; Test 001
(check-expect (available-vals (make-puzzle 3 '((b b c) (b a a) (a a d))  ;; Test 002
                                           '((a 9 *) (b 4 *) (c 3 =) (d 2 =)))
                              (make-posn 1 1))
              '(1 2 3))
(check-expect (available-vals (make-puzzle 4 (list (list 4 2 'b 'b)  ;; Test 003
                                                   (list 2 3 'b 4)
                                                   (list 3 (make-guess 'a 1) 'a 'a)
                                                   (list 'a 'a 'a 3))
                                           '((a 64 *) (b 5 +)))
                              (make-posn 2 2))
              '(2 4))
(check-expect (available-vals (make-puzzle 4 (list (list (make-guess 'a 4) (make-guess 'a 2) 'c 'c)  ;; Test 004
                                                   (list 'b 'a 'c 'c)
                                                   (list 'b 'b 4 'd)
                                                   (list 'b 4 2 'd))
                                           '((a 9 +) (b 6 *) (c 12 *) (d 5 +)))
                              (make-posn 1 1))
              '(1 3))

(define (available-vals puz pos)
  (filter (lambda (x) (not (member? x (append (used-in-row puz pos)
                                              (used-in-column puz pos)))))
          (allvals (length (first (puzzle-board puz))))))

;; Tests:
(check-expect (available-vals puzzle1partial (make-posn 2 2)) '(2 4))
(check-expect (available-vals puzzle1partial2 (make-posn 0 1)) '(3))
(check-expect (available-vals (make-puzzle 4 (list (list 'b 'b (make-guess 'a 3) 1)  ;; Test 005
                                                   (list (make-guess 'a 2) 'b 'a 4)
                                                   (list 'a 'b 'a 2)
                                                   (list 'a 'a 'a 3))
                                           '((a 576 *) (b 24 *)))
                              (make-posn 2 1))
              '(1))
(check-expect (available-vals (make-puzzle 4 (list (list 'b 'b (make-guess 'a 3) (make-guess 'a 1))  ;; Test 006
                                                   (list 'b 3 'a 'a)
                                                   (list 3 1 'a 2)
                                                   (list 1 4 'a 3))
                                           '((a 15 +) (b 8 +)))
                              (make-posn 2 1))
              '(1 2 4))

